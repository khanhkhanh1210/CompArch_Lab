//veding machine
module vending_machine(
    input logic clk, rst_n,
    input logic nickle, dime, quarter,    
    output logic [2:0] change, // 000: no change, 001: 5$, 010: 10$, 011: 15$, 100: 20$
    output logic soda
);
// flag
    logic enough; // 1: enough money, 0: not enough money

// coin input value
    logic [4:0] coin;

// coin value
    logic [4:0] coin_value;

// state machine
    typedef enum logic { 
        IDLE, 
        ACCEPT,
        DISPENSE
     } state;

// create state machine
    state current_state, next_state;   
    always_ff @ (clk or rst_n) begin : state_machine
        if (!rst_n) current_state <= IDLE;
        else current_state <= next_state;
    end

// state transition 
    always_comb begin
        next_state = current_state;
        case (current_state)
            IDLE: begin
                if (!{nickle, dime, quarter}) next_state = ACCEPT;
                else next_state = IDLE;
            end
            ACCEPT: begin
                if (coin_value >= 20) next_state = DISPENSE;
                else next_state = ACCEPT;
            end
            DISPENSE: begin
                next_state = IDLE;
            end
        endcase
    end


// decode coin value
    always_comb begin
        case ({nickle, dime, quarter})
            3'b001: coin = 5'd5;
            3'b010: coin = 5'd10;
            3'b100: coin = 5'd25;
            default: coin = 5'd0;
        endcase
    end

// coin total value
    always_ff@ (posedge clk or negedge rst_n) begin
        if (!rst_n) coin_value <= 0;
        else if (current_state == ACCEPT) coin_value <= coin_value + coin;
    end

// state output
    always_comb begin
        case (current_state)
            IDLE: begin
                soda = 1'b0;
                change = 3'b000;
            end
            ACCEPT: begin
                soda = 1'b0;
                change = 3'b000; 
            end
            DISPENSE: begin
                soda = 1'b1;
                change = coin_value - 20;
                end
        endcase
    end

endmodule